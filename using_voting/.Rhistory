game.IDs = unique(long.df$Game.ID)
for(i in game.IDs){
temp = long.df %>% filter(Game.ID == i)
long.df$Trial[long.df$temp.id %in% temp$temp.id] = 1:nrow(temp)
}
# Create Blocks
long.df$block = 0
long.df$block[which(long.df$Trial %in% c(1,2))] = 1
long.df$block[which(long.df$Trial %in% c(3,4))] = 2
long.df$block[which(long.df$Trial %in% c(5,6))] = 3
long.df$block[which(long.df$Trial %in% c(7,8))] = 4
long.df$distance = floor(abs(long.df$Sample - long.df$Boundary))
# Compute Uncertainty Region
#########################
long.df$Uncertainty.L = NA
long.df$Uncertainty.R = NA
for(j in 1:length(game.IDs)){
game_df = long.df %>% filter(Game.ID == game.IDs[j])
game_df$Uncertainty.L = 1
game_df$Uncertainty.R = 10
for(i in 1:nrow(game_df)){
if(game_df$Sample[i] > game_df$Boundary[i]){
game_df$Uncertainty.R[i] = min(game_df$Sample[i],game_df$Uncertainty.R[i-1])
game_df$Uncertainty.L[i] = max(game_df$Uncertainty.L[i-1],1)
}
if(game_df$Sample[i] < game_df$Boundary[i]){
game_df$Uncertainty.L[i] = max(game_df$Sample[i],game_df$Uncertainty.L[i-1])
game_df$Uncertainty.R[i] = min(game_df$Uncertainty.R[i-1],10)
}
}
game_df$Uncertainty.L = c(1,game_df$Uncertainty.L[1:nrow(game_df)-1])
game_df$Uncertainty.R = c(10,game_df$Uncertainty.R[1:nrow(game_df)-1])
long.df[long.df$Game.ID == game.IDs[j],c('Uncertainty.L','Uncertainty.R')] = game_df[,c('Uncertainty.L','Uncertainty.R')]
}
# In Region Indicator
#########################
long.df$Samp.In.Region = long.df$Sample <= long.df$Uncertainty.R & long.df$Sample >= long.df$Uncertainty.L
# Bisectional Boundary Distance
#########################
long.df$Bi.Boundary = (long.df$Uncertainty.L + long.df$Uncertainty.R)/2
long.df$Bi.Dist = floor(abs(long.df$Sample - long.df$Bi.Boundary))
# Bisectional Distance per Game
game_df = long.df %>%
filter(Condition %in% c('active','passive')) %>%
group_by(Child.ID,Game.ID) %>%
dplyr::summarise(Game.Bi.Dist = mean(Bi.Dist))
long.df = long.df %>%
left_join(game_df, by = c('Child.ID','Game.ID'))
# Classification Accuracy
#########################
long.df$Classification.Score = 10 - abs(long.df$Boundary.Choice - long.df$Boundary)
long.df$Classification.Accuracy = long.df$Classification.Score/10
# Child IDs to Exclude
##############################
long.df %>%
filter(Condition %in% c('active','passive')) %>%
group_by(Child.ID) %>%
dplyr::summarise(count = n_distinct(Game.ID)) %>%
filter(count != 2)
child.id.exclude = c('Test','test1','test2','test3','test4','test5','test 6', 'test 7',
'test 8', 'test9', 'Stephanie', 'pilot 9', 'test02', 'test03', 'test05', '12345',
'TEST', 'test 5', 'test 7 ', 'hhh', 'test', 'd',
'1','2','3','4','5','6','7','8','704','f',
'3108', '3202', '3402', '7502', '8308', '9407', #played game twice
'5103') # played game once)
long.df %>% filter(Child.ID %in% child.id.exclude)
unique(long.df$Child.ID %in% child.id.exclude)
long.df$Child.ID
long.df$Child.ID %in% child.id.exclude
unique(long.df$Child.ID[long.df$Child.ID %in% child.id.exclude])
long.df %>% filter(Child.ID = 3108)
long.df %>% filter(Child.ID == 3108)
long.df %>%
filter(Child.ID %in% child.id.exclude) %>%
group_by(Child.ID) %>%
dplyr::summarise(n=count())
long.df %>%
filter(Child.ID %in% child.id.exclude) %>%
group_by(Child.ID) %>%
dplyr::summarise(n=n())
long.df$Passive.Condition[which(long.df$Condition == 'active')]
long.df$Passive.Condition[which(long.df$Condition == 'active')]
table(long.df$Passive.Condition[which(long.df$Condition == 'active')])
rm(list=ls())
library(dplyr)
court = 'ca1'
# Load Data
load(file=paste('/Volumes/RESEARCH/EDSP/inventory/data_inventory.',court,'.RDATA',sep=''))
df$dissent
df[54,]
sum(df$dissent>0)
court = 'ca1'
load(file=paste('/Volumes/RESEARCH/EDSP/inventory/data_inventory.',court,'.RDATA',sep=''))
load(file=paste('/Volumes/RESEARCH/EDSP/inventory/data_inventory.',court,'.RDATA',sep=''))
df$errata
sum(df$errata)
sum(as.numeric(df$errata))
df[df$errata>0,]
sum(df$dissent>0)
sum(as.numeric(df$errata)>0)
nrow(df)
sum(df$dissent>0)
sum(df$dissent>0)/nrow(df)
sum(as.numeric(df$errata)>0)/nrow(df)
sum(df$per_curiam>0)/nrow(df)
sum(df$per_curiam>0)
# Load Data
load(file=paste('/Volumes/RESEARCH/EDSP/vectors/',court,'_vectors.RDATA',sep=''))
# Load Data
load(file=paste('/Volumes/RESEARCH/EDSP/vectors/',court,'_vectors.RDATA',sep=''))
load(file=paste('/Volumes/RESEARCH/EDSP/inventory/data_inventory.',court,'.RDATA',sep=''))
# Remove Missing Data
df = df[which(!is.na(df$plain_text)),]
# Merge Document Vectors
test = cbind(doc2_sum,df$judge)
dim(test)
# If Judge is Missing, it's numeric. Set these to NA then remove
test[,301][!is.na(as.numeric(test[,301]))] = NA
test = test[!is.na(test[,301]),]
dim(test)
# Fix Judge Names
test[,301] = tolower(test[,301])
test[,301] = gsub(',','',test[,301])
test[,301] = gsub('and','',test[,301])
test[,301] = gsub('<span>','',test[,301])
test[,301] = gsub('senior','',test[,301])
test[,301] = trimws(test[,301])
test = test[nchar(test[,301])<20,]
dim(test)
# How many unique judges?
length(unique(test[,301]))
# Convert to Data Frame
df = as.data.frame(test, stringsAsFactors = F)
# Convert doc vectors to numeric
for(i in 1:300) df[,i] = as.numeric(df[,i])
# Summarize vectors for judge
judge_vecs = df %>% group_by(V301) %>% summarise_all("mean")
# Obtain count of docs per judge
counts = df %>% group_by(V301) %>% summarise(n=n())
counts$n
# Join Judge Vec matrix with Counts. Only Keep vecs with more than 100 docs
judge_vecs = judge_vecs %>% left_join(counts, by = 'V301') %>% filter(n>10) %>% select(-n)
row.names(judge_vecs) = judge_vecs$V301
# Join Judge Metadata
# write.csv(judge_vecs,file='/Volumes/RESEARCH/EDSP/ca1_judges.csv')
judge_meta = read.csv(file=paste('/Volumes/RESEARCH/EDSP/metadata/',court,'_Judge_Metadata.csv',sep=''))
final = judge_vecs %>% left_join(judge_meta,by=c('V301'='Judge'))
judge_vecs = judge_vecs[!is.na(final$Judge.full),]
final = final[!is.na(final$Judge.full),]
# Principal Components
temp = judge_vecs %>% select(-V301)
word_pca <- irlba::prcomp_irlba(temp, n = 10, center = T, scale. = T) # n = no. of principal component vectors to return
final$Appointed.By = as.factor(as.character(final$Appointed.By))
final$Born = as.factor(round(final$Born*.1)*10)
par(bg = 'white')
plot(word_pca$x[,1],word_pca$x[,2], col=final$Appointed.By, pch=19, xlim=c(-20,25))
text(word_pca$x[,1],word_pca$x[,2], labels=final$Appointed.By, cex=0.5, col = "red", pos=3)
plot(word_pca$x[,1],word_pca$x[,2], col=final$Born, pch=19, xlim=c(-20,25))
text(word_pca$x[,1],word_pca$x[,2], labels=final$Born, cex=0.5, col = "red", pos=3)
dim(word_pca)
dim(word_pca$x)
getwd()
setwd('/Users/chansoosong/Desktop/Research/edsp2019project-chansooligans/using_voting/')
#########################
# Set Up
#########################
library(shinystan)
library(parallel)
library(dplyr)
library(rstan)
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
nChains <- 2
raw_data = read.csv('data/SCDB_2018_02_justiceCentered_Citation.csv')
head(raw_data)
cols_to_keep = c('caseId','justice','vote')
# Subset Data
df = raw_data %>%
select(cols_to_keep) %>%
filter(vote <= 2)
df$vote = df$vote - 1
df$justice = as.integer(as.factor(df$justice))
df$caseId = as.integer(as.factor(as.integer(as.factor(df$caseId))))
unique(df$justice)
df$justice
head(df)
head(raw_data)
df$justice
table(df$justice)
length(unique(df$justice))
###
names(df)
###
names(raw_data)
raw_data %>%
group_by(justice,justiceName) %>%
summarize(n=n())
raw_data %>%
group_by(justice,justiceName) %>%
dplyr::summarize(n=n())
###
head(raw_data)
raw_data %>%
group_by(justice,justiceName) %>%
dplyr::summarize(n=n())
###
raw_data$judge_id = df$justice
###
temp = raw_data %>% filter(vote <= 2)
temp$judge_id = df$justice
temp %>%
group_by(judge_id,justice,justiceName) %>%
dplyr::summarize(n=n())
###
load(file='stan_fit_using_voting_1PL.RDATA')
rm(list=ls())
rm(list=ls())
#########################
# Set Up
#########################
library(shinystan)
library(parallel)
library(dplyr)
library(rstan)
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
nChains <- 2
raw_data = read.csv('data/SCDB_2018_02_justiceCentered_Citation.csv')
head(raw_data)
cols_to_keep = c('caseId','justice','vote')
# Vote:
# 1: Concur
# 2: Dissent
# 3: Regular Concurrence
# 4: Special Concurrence
# 5-8:
# Subset Data
df = raw_data %>%
select(cols_to_keep) %>%
filter(vote <= 2)
#########################
# Models
#########################
df$vote = df$vote - 1
df$justice = as.integer(as.factor(df$justice))
df$caseId = as.integer(as.factor(as.integer(as.factor(df$caseId))))
data_list_0 = list(J = length(unique(df$justice)),
K = length(unique(df$caseId)),
N = nrow(df),
jj = df$justice,
kk = df$caseId,
y = df$vote)
###
load(file='stan_fit_using_voting_1PL.RDATA')
temp = raw_data %>% filter(vote <= 2)
temp$judge_id = df$justice
temp %>%
group_by(judge_id,justice,justiceName) %>%
dplyr::summarize(n=n())
###
load(file='stan_fit_using_voting_1PL.RDATA')
###
load(file='stan_fit_using_voting_1PL.RDATA')
launch_shinystan(stan_fit_0)
stan_fit_0
# stan_fit_0 = stan(file = 'stan/stan_irt_2PL.stan',
#                   data = data_list_0,
#                   chains = nChains,
#                   iter = 2000)
#
print(stan_fit_0, pars = c('alpha','beta','delta'))
# stan_fit_0 = stan(file = 'stan/stan_irt_2PL.stan',
#                   data = data_list_0,
#                   chains = nChains,
#                   iter = 2000)
#
print(stan_fit_0, pars = c('alpha','beta','delta'))
stan_fit_0
names(stan_fit_0)
names(stan_fit_0[[1]])
names(stan_fit_0[1])
stan_fit_0[1]
stan_fit_0$`alpha[1]`
stan_fit_0$`alpha[1]`
stan_fit_0[['alpha']]
stan_fit_0
stan_fit_0$delta
stan_fit_0
summary(stan_fit_0)
plot(stan_fit_0)
plot(stan_fit_0[1:20])
res = matrix(stan_fit_0)
res = as.data.frame(stan_fit_0)
dim(res)
res[1,]
res[,1]
res$`alpha[1]`
mean(res$`alpha[1]`)
# stan_fit_0 = stan(file = 'stan/stan_irt_2PL.stan',
#                   data = data_list_0,
#                   chains = nChains,
#                   iter = 2000)
#
print(stan_fit_0, pars = c('alpha','beta','delta'))
res[,1:50]
res[,1:40]
res[,1:38]
res = as.data.frame(stan_fit_0)[,1:38]
apply(res,2,mean)
library(dplyr)
dim(temp)
dim(res)
head(temp)
temp %>%
group_by(judge_id,justice,justiceName) %>%
dplyr::summarize(n=n())
temp = temp %>%
group_by(judge_id,justice,justiceName) %>%
dplyr::summarize(n=n())
dim(temp)
dim(res)
res = as.data.frame(stan_fit_0)[,2:38]
apply(res,2,mean)
dim(res)
res = apply(res,2,mean)
temp$ideology = res
temp
plot(temp$ideology)
plot(temp$justiceName,temp$ideology)
temp = temp %>% arrange(ideology)
plot(temp$justiceName,temp$ideology)
temp
plot(temp$justiceName,temp$ideology)
plot(temp$ideology)
text(temp$justiceName)
plot(temp$ideology)
text(temp$justiceName)
text(temp$justiceName, pos=4)
text(temp$ideology, labels = temp$justiceName, pos=4)
text(temp$ideology, labels = temp$justiceName, pos=4, cex=0.4)
plot(temp$ideology)
text(temp$ideology, labels = temp$justiceName, pos=4, cex=0.4)
text(temp$ideology, labels = temp$justiceName, pos=4, cex=0.4, color = 3)
plot(temp$ideology)
text(temp$ideology, labels = temp$justiceName, pos=4, cex=0.4, color = 3)
plot(temp$ideology)
text(temp$ideology, labels = temp$justiceName, pos=4, cex=0.4, col = 3)
plot(temp$ideology)
text(temp$ideology, labels = temp$justiceName, pos=4, cex=0.8, col = 4)
temp
temp = raw_data %>% filter(vote <= 2)
df$justice
df$justice
temp$judge_id = df$justice
temp = temp %>%
group_by(judge_id,justice,justiceName) %>%
dplyr::summarize(n=n())
temp
rm(list=ls())
setwd('/Users/chansoosong/Desktop/Research/edsp2019project-chansooligans/using_voting/')
load(file='stan_fit_using_voting_1PL.RDATA')
raw_data = read.csv('data/SCDB_2018_02_justiceCentered_Citation.csv')
cols_to_keep = c('caseId','justice','vote')
rm(list=ls())
library(dplyr)
court = 'ca1'
# Load Data
load(file=paste('/Volumes/RESEARCH/EDSP/vectors/',court,'_vectors.RDATA',sep=''))
load(file=paste('/Volumes/RESEARCH/EDSP/inventory/data_inventory.',court,'.RDATA',sep=''))
# Remove Missing Data
df = df[which(!is.na(df$plain_text)),]
# Merge Document Vectors
test = cbind(doc2_sum,df$judge)
dim(test)
# If Judge is Missing, it's numeric. Set these to NA then remove
test[,301][!is.na(as.numeric(test[,301]))] = NA
test = test[!is.na(test[,301]),]
dim(test)
# Fix Judge Names
test[,301] = tolower(test[,301])
test[,301] = gsub(',','',test[,301])
test[,301] = gsub('and','',test[,301])
test[,301] = gsub('<span>','',test[,301])
test[,301] = gsub('senior','',test[,301])
test[,301] = trimws(test[,301])
test = test[nchar(test[,301])<20,]
dim(test)
# How many unique judges?
length(unique(test[,301]))
# Convert to Data Frame
df = as.data.frame(test, stringsAsFactors = F)
# Convert doc vectors to numeric
for(i in 1:300) df[,i] = as.numeric(df[,i])
# Summarize vectors for judge
judge_vecs = df %>% group_by(V301) %>% summarise_all("mean")
# Obtain count of docs per judge
counts = df %>% group_by(V301) %>% summarise(n=n())
counts$n
# Join Judge Vec matrix with Counts. Only Keep vecs with more than 100 docs
judge_vecs = judge_vecs %>% left_join(counts, by = 'V301') %>% filter(n>10) %>% select(-n)
row.names(judge_vecs) = judge_vecs$V301
# Join Judge Metadata
# write.csv(judge_vecs,file='/Volumes/RESEARCH/EDSP/ca1_judges.csv')
judge_meta = read.csv(file=paste('/Volumes/RESEARCH/EDSP/metadata/',court,'_Judge_Metadata.csv',sep=''))
final = judge_vecs %>% left_join(judge_meta,by=c('V301'='Judge'))
judge_vecs = judge_vecs[!is.na(final$Judge.full),]
final = final[!is.na(final$Judge.full),]
# Principal Components
temp = judge_vecs %>% select(-V301)
word_pca <- irlba::prcomp_irlba(temp, n = 10, center = T, scale. = T) # n = no. of principal component vectors to return
final$Appointed.By = as.factor(as.character(final$Appointed.By))
final$Born = as.factor(round(final$Born*.1)*10)
par(bg = 'white')
plot(word_pca$x[,1],word_pca$x[,2], col=final$Appointed.By, pch=19, xlim=c(-20,25))
text(word_pca$x[,1],word_pca$x[,2], labels=final$Appointed.By, cex=0.5, col = "red", pos=3)
plot.df = word_pca$x
plot.df = word_pca$x[,1:2]
plot.df
ggplot(plot.df, aes(x=PC1, y=PC2)) + geom_point()
plot.df = as.data.frame(word_pca$x[,1:2])
plot.df
ggplot(plot.df, aes(x=PC1, y=PC2)) + geom_point()
plot.df$appointed = final$Appointed.By
ggplot(plot.df, aes(x=PC1, y=PC2)) +
geom_point() +
geom_text(label=appointed)
plot.df
ggplot(plot.df, aes(x=PC1, y=PC2)) +
geom_point() +
geom_text(label=appointed)
ggplot(plot.df, aes(x=PC1, y=PC2,label=appointed)) +
geom_point() +
geom_text()
ggplot(plot.df, aes(x=PC1, y=PC2,label=appointed)) +
geom_point() +
geom_text() +
scale_color_brewer(palette="Dark2")
ggplot(plot.df, aes(x=PC1, y=PC2,label=appointed)) +
geom_point() +
geom_text() +
scale_fill_manual(palette="Dark2")
ggplot(plot.df, aes(x=PC1, y=PC2,label=appointed)) +
geom_point() +
geom_text() +
scale_color_manual(breaks = df$appointed) +
scale_color_brewer(palette="Dark2")
ggplot(plot.df, aes(x=PC1, y=PC2,label=appointed)) +
geom_point() +
geom_text() +
scale_color_manual(breaks = df$appointed)
ggplot(plot.df, aes(x=PC1, y=PC2,color=appointed)) +
geom_point() +
geom_text() +
scale_color_manual(breaks = df$appointed)
ggplot(plot.df, aes(x=PC1, y=PC2,color=appointed)) +
geom_point() +
geom_text(label=appointed) +
scale_color_manual(breaks = df$appointed)
ggplot(plot.df, aes(x=PC1, y=PC2,color=appointed)) +
geom_point() +
geom_text(label=plot.df$appointed) +
scale_color_manual(breaks = df$appointed)
ggplot(plot.df, aes(x=PC1, y=PC2,color=appointed,label=appointed)) +
geom_point() +
geom_text() +
scale_color_manual(breaks = df$appointed)
ggplot(plot.df, aes(x=PC1, y=PC2,label=appointed)) +
geom_point() +
geom_text() +
scale_color_manual(breaks = df$appointed)
ggplot(plot.df, aes(x=PC1, y=PC2,label=appointed)) +
geom_point() +
geom_text() +
scale_color_manual(breaks = df$appointed,
values = unique(df$appointed))
ggplot(plot.df, aes(x=PC1, y=PC2,label=appointed)) +
geom_point() +
geom_text() +
scale_color_manual(breaks = df$appointed,
values = unique(as.character(df$appointed)))
plot.df
ggplot(plot.df, aes(x=PC1, y=PC2,col=appointed)) +
geom_point() +
geom_text() +
scale_color_manual(breaks = df$appointed)
ggplot(plot.df, aes(x=PC1, y=PC2,col=appointed,label=appointed)) +
geom_point() +
geom_text()
ggplot(plot.df, aes(x=PC1, y=PC2,col=appointed,label=appointed)) +
geom_point() +
geom_text() + scale_color_brewer(palette="Dark2")
ggplot(plot.df, aes(x=PC1, y=PC2,col=appointed,label=appointed)) +
geom_point() +
geom_text()
ggplot(plot.df, aes(x=PC1, y=PC2,col=appointed,label=appointed)) +
geom_point() +
geom_text(jitter=0.5)
ggplot(plot.df, aes(x=PC1, y=PC2,col=appointed,label=appointed)) +
geom_point() +
geom_text(jitter=0.5) +
ggtitle('Plot Principle Components of Judge Vectors')
ggplot(plot.df, aes(x=PC1, y=PC2,col=appointed,label=appointed)) +
geom_point() +
geom_text() +
ggtitle('Plot Principle Components of Judge Vectors')
ggplot(plot.df, aes(x=PC1, y=PC2,col=appointed,label=appointed)) +
geom_point() +
geom_text() +
ggtitle('Principle Components of Judge Vectors')
setwd('/Users/chansoosong/Desktop/Research/edsp2019project-chansooligans/using_voting/')
load(file='/Volumes/RESEARCH/EDSP/stan_fit_using_voting_1PL.RDATA')
print(stan_fit_0, pars = c('alpha','beta','delta'))
